# Run pack.ps1 on Linux for common gitflow branches
# - triggers on push and PRs for main/master/develop and feature/release/hotfix branches
# - selects Release configuration for main/master/release/*/hotfix/*, Debug otherwise
# - runs on ubuntu-latest and uses pwsh to execute the script
# - uploads the BuildOutput directory as an artifact

name: CI - Pack

on:
  push:
    branches:
      - main
      - develop
      - 'release/**'
      - 'hotfix/**'
      - 'feature/**'
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch: {}

jobs:
  pack:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: nuget-packages-${{ runner.os }}-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            nuget-packages-${{ runner.os }}-

      - name: Install GitVersion
        run: dotnet tool install --global GitVersion.Tool

      - name: Add dotnet tools to PATH
        run: echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

      - name: Verify GitVersion installation and run it (safe)
        run: |
          echo "PATH: $PATH"
          echo "Checking for GitVersion executable and attempting to run it (non-fatal)"
          # Prefer dotnet-gitversion shim, but fall back to gitversion if present
          if command -v dotnet-gitversion >/dev/null 2>&1; then
            echo "Found dotnet-gitversion at $(command -v dotnet-gitversion)"
            # Try common version/help flags; if none work, run the tool without flags.
            # Ensure the step doesn't fail the job if the tool returns a non-zero exit.
            dotnet-gitversion --version 2>/dev/null || \
              dotnet-gitversion -v 2>/dev/null || \
              dotnet-gitversion --help 2>/dev/null || \
              dotnet-gitversion 2>/dev/null || \
              echo "dotnet-gitversion executed but returned non-zero or produced no version output"
          elif command -v gitversion >/dev/null 2>&1; then
            echo "Found gitversion at $(command -v gitversion)"
            gitversion --version 2>/dev/null || \
              gitversion -v 2>/dev/null || \
              gitversion --help 2>/dev/null || \
              gitversion 2>/dev/null || \
              echo "gitversion executed but returned non-zero or produced no version output"
          else
            echo "ERROR: GitVersion executable not found in PATH"
            ls -la $HOME/.dotnet/tools/ || true
            exit 1
          fi

      - name: Run pack script (pwsh)
        shell: pwsh
        run: |
         
          ./src/pack.ps1 -Configuration release -CreateNugetPackages $true -RunGitVersion $true -ForceInstallPackage $true

      - name: Generate artifact attestation
        if: ${{ github.repository == 'crwsolutions/Spectre.Console.Extensions.Markup' }}
        # Attestation requires OIDC/ID token which is not available for forked PRs.
        # Only run on the upstream repository to avoid failures from forked runs.
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: '*.vsix'

      - name: Upload BuildOutput artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: src/BuildOutput

      - name: Publish NuGet packages to GitHub Packages
        if: success()
        run: |
          echo "Publishing nupkgs from src/BuildOutput to GitHub Packages"
          for f in src/BuildOutput/*.nupkg; do
            echo "Pushing $f"
            dotnet nuget push "$f" --api-key ${{ secrets.GITHUB_TOKEN }} --source https://nuget.pkg.github.com/andreabalducci/index.json --skip-duplicate
          done
